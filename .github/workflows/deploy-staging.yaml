name: Build and Deploy Main

on:
  push:
    branches: [ staging ]

env:
  PROJECT_NAME: blaze-stg
  HOST_PORT: 4000
  TARGET_PORT: 8080
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/blaze

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate semantic version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag name as version
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # If this is a branch push, generate version based on git describe
            VERSION=$(git describe --tags --always --dirty | sed 's/-g[0-9a-f]\+//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64, linux/arm64
          tags: |
              ${{ env.DOCKER_IMAGE }}:stg
              ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
            docker stop ${{ env.PROJECT_NAME }} || true
            docker rm ${{ env.PROJECT_NAME }} || true
            echo '${{ secrets.ENV_STG }}' > .env
            docker run -d \
              --name ${{ env.PROJECT_NAME }} \
              --restart unless-stopped \
              -p ${{ env.HOST_PORT }}:${{ env.TARGET_PORT }} \
              --env-file .env \
              ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
