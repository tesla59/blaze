package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/tesla59/blaze/models"
	"github.com/tesla59/blaze/repository"
	"github.com/tesla59/blaze/utils"
)

// ClientService acts as a service layer for managing clients.
type ClientService struct {
	repo repository.ClientRepository
}

// NewClientService creates a new instance of ClientService.
func NewClientService(repo repository.ClientRepository) *ClientService {
	return &ClientService{
		repo: repo,
	}
}

// RegisterClient registers a new client with the given ID, UUID, and username.
func (s *ClientService) RegisterClient(ctx context.Context) (*models.Client, error) {
	uid := uuid.New().String()
	username := utils.GenerateName(uid)
	// ID is not set here, it will be generated by the database
	client := &models.Client{
		UUID:     uid,
		UserName: username,
	}
	if err := s.repo.Create(ctx, client); err != nil {
		return nil, err
	}
	return client, nil
}

// GetClient retrieves a client by its ID.
func (s *ClientService) GetClient(ctx context.Context, id int) (*models.Client, error) {
	client, err := s.repo.GetClientByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return client, nil
}
